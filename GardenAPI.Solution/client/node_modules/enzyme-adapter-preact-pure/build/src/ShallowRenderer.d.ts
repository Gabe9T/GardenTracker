import type { ShallowRenderer as AbstractShallowRenderer, RSTNode, ShallowRenderOptions } from 'enzyme';
import type { VNode } from 'preact';
import type { PreactAdapterOptions } from './Adapter.js';
import type { EventDetails } from './MountRenderer.js';
export declare type Options = PreactAdapterOptions;
export default class ShallowRenderer implements AbstractShallowRenderer {
    private _mountRenderer;
    private _options;
    constructor(options?: Options);
    render(el: VNode, context?: any, options?: ShallowRenderOptions): void;
    simulateError(nodeHierarchy: RSTNode[], rootNode: RSTNode, error: any): void;
    simulateEvent(node: RSTNode, eventName: string, args: EventDetails): void;
    unmount(): void;
    getNode(): RSTNode | null;
    batchedUpdates(fn: () => any): void;
}
