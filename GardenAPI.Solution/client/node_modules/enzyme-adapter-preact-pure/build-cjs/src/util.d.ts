import type { RSTNode, RSTNodeChild } from 'enzyme';
import type { VNode } from 'preact';
export declare function getType(obj: Object): string;
/**
 * Return the type of a vnode as a string.
 */
export declare function nodeType(vnode: VNode): string;
export declare function getDisplayName(node: RSTNode): string;
/**
 * Call `fn` with a method on an object temporarily replaced with `methodImpl`.
 */
export declare function withReplacedMethod(obj: any, method: string, methodImpl: Function, fn: Function): void;
export declare function toArray(obj: any): any[];
export declare function isRSTNode(node: RSTNodeChild): node is RSTNode;
/**
 * @param node The node to start searching for a host node
 * @returns The first host node in the children of the passed in node. Will
 * return the passed in node if it is a host node
 */
export declare function nodeToHostNode(node: RSTNodeChild): Node | null;
export declare function mapNativeEventNames(event: string): string;
export declare function propFromEvent(event: string): string;
